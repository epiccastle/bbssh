# Clojure CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#

version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test:
    machine:
      image: ubuntu-2004:current
    # docker:
    #   # specify the version you desire here
    #   - image: circleci/clojure:openjdk-11-lein-2.9.0
    resource_class: medium
    working_directory: ~/repo
    environment:
      LEIN_ROOT: "true"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.11.1.1165.sh
            chmod +x linux-install-1.11.1.1165.sh
            sudo ./linux-install-1.11.1.1165.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install gcc zlib1g-dev make build-essential docker-ce
      - run:
          name: Download GraalVM
          command: |
            cd ~
            if ! [ -d graalvm-ce-java11-22.2.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.2.0/graalvm-ce-java11-linux-amd64-22.2.0.tar.gz
              tar xzf graalvm-ce-java11-linux-amd64-22.2.0.tar.gz
            fi
            graalvm-ce-java11-22.2.0/bin/gu install native-image
      - run:
          name: Install babashka
          command: |
            curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
            chmod +x install
            sudo ./install
      - run:
          name: Run JVM tests
          command: |
            set -x
            clojure -Spath -m bbssh.core
            make test
          no_output_timeout: 5m
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}
      - store_artifacts:
          path: /tmp/release
          destination: release

  linux:
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.9.0
    working_directory: ~/repo
    environment:
      LEIN_ROOT: "true"
      GRAALVM_HOME: /home/circleci/graalvm-ce-java11-22.2.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - linux-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.11.1.1165.sh
            chmod +x linux-install-1.11.1.1165.sh
            sudo ./linux-install-1.11.1.1165.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install gcc zlib1g-dev make build-essential
      - run:
          name: Download GraalVM
          command: |
            cd ~
            if ! [ -d graalvm-ce-java11-22.2.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.2.0/graalvm-ce-java11-linux-amd64-22.2.0.tar.gz
              tar xzf graalvm-ce-java11-linux-amd64-22.2.0.tar.gz
            fi
            graalvm-ce-java11-22.2.0/bin/gu install native-image
      - run:
          name: Build binary
          command: |
            make package-linux GRAALVM_HOME=$GRAALVM_HOME STATIC=true
          no_output_timeout: 40m
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-ce-java11-22.0.0.2
          key: linux-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - store_artifacts:
          path: dist
          destination: dist

  mac:
    macos:
      xcode: "14.0.0"
    environment:
      GRAALVM_HOME: /Users/distiller/graalvm-ce-java11-22.2.0/Contents/Home
    steps:
      - checkout
      - restore_cache:
          keys:
            - mac-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            .circleci/script/install-clojure /usr/local
      - run:
          name: Download GraalVM
          command: |
            cd ~
            ls -la
            if ! [ -d graalvm-ce-java11-22.2.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.2.0/graalvm-ce-java11-darwin-amd64-22.2.0.tar.gz
              tar xzf graalvm-ce-java11-darwin-amd64-22.2.0.tar.gz
            fi
            $GRAALVM_HOME/bin/gu install native-image
      # - run:
      #     name: Run JVM tests
      #     command: |
      #       make test GRAALVM_HOME=$GRAALVM_HOME
      - run:
          name: Build binary
          command: |
            make package-macos GRAALVM_HOME=$GRAALVM_HOME STATIC=false
          no_output_timeout: 40m
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-ce-java11-22.2.0
          key: mac-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - store_artifacts:
          path: dist
          destination: dist

  windows:
    executor: win/default

    steps:
      - checkout
      - run:
          name: debug
          shell: powershell.exe
          command: |
            Write-Host "Setting up build environment..."
            cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
              if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
              }
            }

            Write-Host "compiling c..."
            md build
            cl /c src\c\bbssh.c
            # Rename-Item bbssh.obj build\bbssh.obj
            lib /out:build\bbssh.lib bbssh.obj
            Rename-Item bbssh.lib build\bbssh.lib

            Write-Host "downloading graal..."
            if (Test-Path('graalvm')) { return } else { (New-Object Net.WebClient).DownloadFile('https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.2.0/graalvm-ce-java11-windows-amd64-22.2.0.zip', 'graalvm.zip') }
            Write-Host "expanding graal..."
            if (Test-Path('graalvm')) { return } else { Expand-Archive graalvm.zip graalvm }
            Write-Host "installing native-image..."
            graalvm\graalvm-ce-java11-22.2.0\bin\gu install native-image
            $Version = '1.11.1.1165'
            Write-Host "downloading clojure $Version..."
            $ClojureToolsUrl = "https://download.clojure.org/install/clojure-tools-$Version.zip"
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls12'
            Invoke-WebRequest -Uri $ClojureToolsUrl -OutFile clojure-tools.zip
            $DestinationPath = "C:\Users\circleci\Documents\WindowsPowerShell\Modules"
            $ExistingLocation = "$DestinationPath\ClojureTools"
            Write-Host "expanding clojure $Version..."
            if (Test-Path $ExistingLocation) { Remove-Item -Path $ExistingLocation -Recurse }
            Expand-Archive clojure-tools.zip -DestinationPath $DestinationPath
            Remove-Item clojure-tools.zip

            Write-Host "Installed clojure:"
            clj --version

            $env:Path = 'C:\Users\circleci\project\graalvm\graalvm-ce-java11-22.2.0\bin;' + $env:Path
            $env:GRAALVM_HOME = 'C:\Users\circleci\project\graalvm\graalvm-ce-java11-22.2.0'
            $env:JAVA_HOME = 'C:\Users\circleci\project\graalvm\graalvm-ce-java11-22.2.0'

            Write-Host "PATH: $env:Path"
            Write-Host "GRAALVM_HOME: $env:GRAALVM_HOME"
            Write-Host "JAVA_HOME: $env:JAVA_HOME"

            Write-Host "Building BbsshUtils..."
            javac -h src\c\native src\c\native\BbsshUtils.java

            Write-Host "Building native-image..."
            clj -M:native-image-windows

workflows:
  version: 2
  ci:
    jobs:
      # - test:
      #     filters:
      #       branches:
      #         only: main
      # - mac:
      #     filters:
      #       branches:
      #         only: remove-jni
      # - linux:
      #     filters:
      #       branches:
      #         only: remove-jni
      - windows:
          filters:
            branches:
              only: remove-jni
