# Clojure CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#

version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test:
    machine:
      image: ubuntu-2204:current
    # docker:
    #   # specify the version you desire here
    #   - image: circleci/clojure:openjdk-11-lein-2.9.0
    resource_class: medium
    working_directory: ~/repo
    environment:
      LEIN_ROOT: "true"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.11.1.1165.sh
            chmod +x linux-install-1.11.1.1165.sh
            sudo ./linux-install-1.11.1.1165.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install gcc zlib1g-dev make build-essential docker-ce
      - run:
          name: Download GraalVM
          command: |
            cd ~
            if ! [ -d graalvm-jdk-21.0.1+12.1 ]; then
              curl -O -sL https://download.oracle.com/graalvm/21/archive/graalvm-jdk-21.0.1_linux-x64_bin.tar.gz
              tar xzf graalvm-jdk-21.0.1_linux-x64_bin.tar.gz
            fi
      - run:
          name: Install babashka
          command: |
            curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
            chmod +x install
            sudo ./install
      - run:
          name: Run JVM tests
          command: |
            set -x
            clojure -Spath -m bbssh.core
            make test
          no_output_timeout: 5m
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}
      - store_artifacts:
          path: /tmp/release
          destination: release

  linux:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/repo
    environment:
      LEIN_ROOT: "true"
      GRAALVM_HOME: /home/circleci/graalvm-jdk-21.0.1+12.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - linux-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.11.1.1165.sh
            chmod +x linux-install-1.11.1.1165.sh
            sudo ./linux-install-1.11.1.1165.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install gcc zlib1g-dev make build-essential
      - run:
          name: Download GraalVM
          command: |
            cd ~
            if ! [ -d graalvm-jdk-21.0.1+12.1 ]; then
              curl -O -sL https://download.oracle.com/graalvm/21/archive/graalvm-jdk-21.0.1_linux-x64_bin.tar.gz
              tar xzf graalvm-jdk-21.0.1_linux-x64_bin.tar.gz
            fi
      - run:
          name: Build binary
          command: |
            make package-linux GRAALVM_HOME=$GRAALVM_HOME STATIC=true
          no_output_timeout: 40m
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-jdk-21.0.1+12.1
          key: linux-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - store_artifacts:
          path: dist
          destination: dist

  mac:
    macos:
      xcode: "14.0.0"
    environment:
      GRAALVM_HOME: /Users/distiller/graalvm-jdk-21.0.1+12.1/Contents/Home
    steps:
      - checkout
      - restore_cache:
          keys:
            - mac-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            .circleci/script/install-clojure /usr/local
      - run:
          name: Download GraalVM
          command: |
            cd ~
            ls -la
            if ! [ -d graalvm-jdk-21.0.1+12.1 ]; then
              curl -O -sL https://download.oracle.com/graalvm/21/archive/graalvm-jdk-21.0.1_macos-x64_bin.tar.gz
              tar xzf graalvm-jdk-21.0.1_macos-x64_bin.tar.gz
            fi
      # - run:
      #     name: Run JVM tests
      #     command: |
      #       make test GRAALVM_HOME=$GRAALVM_HOME
      - run:
          name: Build binary
          command: |
            make package-macos GRAALVM_HOME=$GRAALVM_HOME STATIC=false
          no_output_timeout: 40m
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-jdk-21.0.1+12.1
          key: mac-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - store_artifacts:
          path: dist
          destination: dist

  windows:
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - windows-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: debug
          shell: powershell.exe
          command: |
            $BBSSH_VERSION = "0.5.0"
            Write-Host "Setting up build environment..."
            cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
              if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
              }
            }

            if (Test-Path('graalvm')) {
              Write-Host "skipping graal download."
            } else {
              Write-Host "downloading graal..."
              (New-Object Net.WebClient).DownloadFile( 'https://download.oracle.com/graalvm/21/archive/graalvm-jdk-21.0.1_windows-x64_bin.zip', 'graalvm.zip')
            }

            if (Test-Path('graalvm')) {
              echo "skipping graal expansion."
            } else {
              Write-Host "expanding graal..."
              Expand-Archive graalvm.zip graalvm
            }

            $Version = '1.11.1.1165'
            $DestinationPath = "C:\Users\circleci\Documents\WindowsPowerShell\Modules"
            if(Test-Path("$DestinationPath\ClojureTools")) {
              Write-Host "Clojure already installed..."
            } else {
              Write-Host "downloading clojure $Version..."
              $ClojureToolsUrl = "https://download.clojure.org/install/clojure-tools-$Version.zip"
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls12'
              Invoke-WebRequest -Uri $ClojureToolsUrl -OutFile clojure-tools.zip

              $ExistingLocation = "$DestinationPath\ClojureTools"
              Write-Host "expanding clojure $Version..."
              if (Test-Path $ExistingLocation) { Remove-Item -Path $ExistingLocation -Recurse }
              Expand-Archive clojure-tools.zip -DestinationPath $DestinationPath
              Remove-Item clojure-tools.zip
            }

            Write-Host "compiling bbssh..."
            md build
            cl /c src\c\bbssh.c
            lib /out:build\bbssh.lib bbssh.obj

            Write-Host "installing bbssh lib..."
            copy build\bbssh.lib C:\Users\circleci\project\graalvm\graalvm-jdk-21.0.1+12.1\lib\static\windows-amd64\

            Write-Host "Installed clojure:"
            clj --version

            $env:Path = 'C:\Users\circleci\project\graalvm\graalvm-jdk-21.0.1+12.1\bin;' + $env:Path
            $env:GRAALVM_HOME = 'C:\Users\circleci\project\graalvm\graalvm-jdk-21.0.1+12.1'
            $env:JAVA_HOME = 'C:\Users\circleci\project\graalvm\graalvm-jdk-21.0.1+12.1'

            Write-Host "PATH: $env:Path"
            Write-Host "GRAALVM_HOME: $env:GRAALVM_HOME"
            Write-Host "JAVA_HOME: $env:JAVA_HOME"

            Write-Host "Building BbsshUtils..."
            javac -h src\c\native src\c\native\BbsshUtils.java

            Write-Host "Building native-image..."
            clj -M:native-image-windows

            Write-Host "Cleaning bbssh.lib..."
            Remove-Item "C:\Users\circleci\project\graalvm\graalvm-jdk-21.0.1+12.1\lib\static\windows-amd64\bbssh.lib"

            # Write-Host "testing bbssh..."
            # $env:TEST = 1
            # $env:BABASHKA_POD = 1
            # C:\Users\circleci\project\build\bbssh

            Write-Host "Making bbssh.zip..."
            md archive
            copy build\bbssh.exe archive
            Add-Type -assembly "system.io.compression.filesystem"
            [io.compression.zipfile]::CreateFromDirectory("archive", "build\bbssh-$BBSSH_VERSION-windows-amd64.zip")

            md dist
            copy build\bbssh-$BBSSH_VERSION-windows-amd64.zip dist
            copy build\bbssh.exe dist
            #copy build\sunmscapi.dll dist
      - save_cache:
          paths:
            - ~/project/graalvm
            - C:\Users\circleci\Documents\WindowsPowerShell\Modules\ClojureTools
          key: windows-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - store_artifacts:
          path: dist
          destination: dist

workflows:
  version: 2
  ci:
    jobs:
      - test:
          filters:
            branches:
              only: main
      - mac:
          filters:
            branches:
              only: main
      - linux:
          filters:
            branches:
              only: main
      - windows:
          filters:
            branches:
              only: main
